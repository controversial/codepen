const canvas = document.getElementById('draw');
const ctx = canvas.getContext('2d');
const angleRange = document.getElementById('angleRange');
const angleLabel = document.getElementById('angleLabel');

let angle = 0;

window.addEventListener('resize', () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  // 0, 0 is center
  ctx.translate(window.innerWidth / 2, window.innerHeight / 2);
  redraw();
});

angleRange.addEventListener('input', () => {
  angle = angleRange.valueAsNumber;
  redraw();
});


// Rotate a single point around the origin by a given number of degrees
function rotate(x, y, theta) {
  const deg2rad = Math.PI / 180;
  return [
    x * Math.cos(theta * deg2rad) - y * Math.sin(theta * deg2rad),
    y * Math.cos(theta * deg2rad) + x * Math.sin(theta * deg2rad),
  ];
}

// Rotate a square of a given size around the origin and return the coordinates of its corners
function rotateSquare(size, theta) {
  return [
    rotate(-size / 2, -size / 2, theta), // Top left
    rotate(size / 2, -size / 2, theta),  // Top right
    rotate(size / 2, size / 2, theta),   // Bottom right
    rotate(-size / 2, size / 2, theta),  // Bottom left
  ];
}

// Get the size of the bounding box from a set of coordinates
function getSquareBoundingDimensions(coords) {
  let [xs, ys] = _.zip(...coords);
  return [
    Math.max(...xs) - Math.min(...xs),
    Math.max(...ys) - Math.min(...ys),
  ];
}


function redraw() {
  angleLabel.innerHTML = `Angle: ${angle.toFixed(2)}`;
  angleRange.value = angle;

  ctx.clearRect(-canvas.width / 2, -canvas.height/2, canvas.width, canvas.height);

  let size = Math.min(
    canvas.width * (2 / 3),
    canvas.height * (2 / 3),
  );

  ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';

  // Draw first rectangle
  ctx.beginPath();
  const corners = rotateSquare(size, angle);
  corners.forEach(c => ctx.lineTo(...c));
  ctx.closePath();
  ctx.fill();

  // Find the ratio for fitting rectangle size by making an imaginary square, rotating it, and seeing how much it would overflow the bounds of its parent.
  const testCorners = rotateSquare(size, angle);
  const testDims = getSquareBoundingDimensions(testCorners);
  const ratio = size / testDims[0]; // Both dimensions are the same because it's a square

  // Draw inner rectangles
  const n = 10;
  for (let i = 1; i < n; i++) {
    const rot = (i + 1) * angle;
    ctx.beginPath();
    size *= ratio;
    
    const corners = rotateSquare(size, rot);
    corners.forEach(c => ctx.lineTo(...c));
    ctx.closePath();
    ctx.fill();
  }
}




window.dispatchEvent(new Event('resize'));
angleRange.dispatchEvent(new Event('input'));

function step() {
  // Adjust the angle different amounts based on distance from 90Â° so that the animation moves more slowly when it's lined up as cooler patterns
  angle += (Math.min(angle, 90 - angle) + 2) / 100;
  angle %= 90;
  redraw();
}

let interval = setInterval(step, 10);
let running = true;

function toggle() {
  if (running) clearInterval(interval);
  else interval = setInterval(step, 10);
  running = !running;
}
