const NUM_PARTICLES = 100;

// Averages multiple random values to simulate gaussian distribution. Higher values of n result in
// a tighter focus.
function gaussRand(samples = 6) {
  let rand = 0;
  for (let i = 0; i < samples; i += 1) rand += Math.random();
  return rand / samples;
}


// PARTICLE ENGINE

class Particle {
  constructor() {
    // Mechanical properties
    this.startProgress = Math.random();     // starting position from 0 to 1
    this.speed = Math.random() * .25 + .05; // speed from .05 to .30
    this.frequency = 1;                     // every particle completes 1 cycle
    this.amplitude = gaussRand(10) * .2;    // amplitude from 0 to .2
    this.yShift = gaussRand(20) * .5 - .25; // vertical shift from -.25 to .25
    // Visual properties
    this.opacity = Math.random() * .5 + .25;        // opacity from .25 to .75
    this.size = Math.floor(Math.random() * 10 + 5); // size from 5px to 20px
  }
  
  position(time) {
    const progress = (this.startProgress + (time * this.speed)) % 1;
    return [
      // Go off front and back edge of screen a bit
      progress * 1.1 - 0.05,
      0.5 + this.yShift + (this.amplitude * Math.sin(progress * 2 * Math.PI)),
    ];
  }
}




// RENDERING ENGINE




const vertexShader = `
void main() {
    gl_Position = vec4(position, 1.0);
}
`;

const fragmentShader = `
#define PI 3.141592653

uniform vec2 u_resolution;
uniform float u_time;
const int num_particles = ${NUM_PARTICLES};
uniform vec2 u_particles_pos[num_particles];
uniform vec2 u_particles_attr[num_particles];


void main() {
  vec3 color = vec3(0., 0., 0.);

  float radius;
  float opacity;
  vec2 center;
  float inCircle;

  for (int i = 0; i < num_particles; i += 1) {
    radius = u_particles_attr[i][1];
    opacity = u_particles_attr[i][0];
    center = u_particles_pos[i] * u_resolution;
    inCircle = smoothstep(radius - 1., radius + 1., distance(center, gl_FragCoord.xy));
    color += mix(
      vec3(opacity, opacity, opacity),
      vec3(0., 0., 0.),
      inCircle
    );
  }

  gl_FragColor = vec4(color, 1.);
}
`;



class ParticleRenderer {
  constructor(container, numParticles) {
    // Set up particles
    this.particles = new Array(numParticles)
      .fill(null)
      .map(p => new Particle());
    
    // Set up scene

    this.scene = new THREE.Scene();
    // Define geometry
    const geometry = new THREE.PlaneBufferGeometry(2, 2);
    // Define material
    this.uniforms = {
      u_time: { type: "f", value: 0.0 },
      u_resolution: { type: "v2", value: new THREE.Vector2() },

      u_particles_pos: { type: "v2v", value: this.particles.map(p => new THREE.Vector2()) },
      u_particles_attr: {
        type: "v2v",
        value: this.particles.map(({ opacity, size }) => new THREE.Vector2(opacity, size)),
      }
    };
    const material = new THREE.ShaderMaterial({
      uniforms: this.uniforms,
      vertexShader,
      fragmentShader,
    });
    // Create mesh from the two
    const mesh = new THREE.Mesh(geometry, material);
    // and add it to the scene
    this.scene.add(mesh);

    // Set up camera

    this.camera = new THREE.Camera();
    this.camera.position.z = 1;

    // Set up renderer

    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(this.renderer.domElement);
    
    // Set up stats

    this.stats = new Stats();
    this.stats.setMode(0);
    this.stats.domElement.classList.add('stats');
    container.appendChild(this.stats.domElement);

    // Misc

    this.startTime = 0;
    setTimeout(() => this.resize(), 50);
    window.addEventListener('resize', () => this.resize());
  }

  resize() {
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.uniforms.u_resolution.value.x = this.renderer.domElement.width;
    this.uniforms.u_resolution.value.y = this.renderer.domElement.height;
  }

  get elapsedTime() {
    // First call
    if (!this.startTime) {
      this.startTime = new Date();
      return 0;
    }
    // Subsequent calls
    return (new Date() - this.startTime) / 1000;
  }
  
  render() {
    this.uniforms.u_time.value = this.elapsedTime;
    this.uniforms.u_particles_pos.value = this.particles
      .map(p => new THREE.Vector2(...p.position(this.elapsedTime)));

    this.stats.update();

    this.renderer.render(this.scene, this.camera);

    requestAnimationFrame(() => this.render());
  }
}


const renderer = new ParticleRenderer(document.getElementById('container'), NUM_PARTICLES);
renderer.render();
